const assert = require('assert');
const uav_params = require('./uav_params');

// Test the acceleration due to gravity constant
assert.deepStrictEqual(uav_params.g, 9.8);

// Test the air densiy value
assert.deepStrictEqual(uav_params.rho, 1.2682);

// Test the number of UAVs in the config
assert.deepStrictEqual(uav_params.uav_param_config.uavs.length, 3);

// Test the names of the UAVs in the config
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].name, 'Zagi');
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].name, 'Aerosonode');
assert.deepStrictEqual(uav_params.uav_param_config.uavs[2].name, 'Gemini');

// Test the masses of the first two UAVs (Kg)
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].mass, 1.56);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].mass, 13.5);

// Test the Surface area of the wing (m^2)
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].S, 0.2589);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].S, 0.55);

// Test the Wing span (m)
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].b, 1.4224);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].b, 2.8956);

// Test the Mean aerodynamic chord of the wing (m)
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].c, 0.3302);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].c, 0.18994);

// Test the Area of the propeller (m^2)
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].S_prop, 0.0314);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].S_prop, 0.2027);

// Test the Constant that specifies the efficiency of the motor
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].k_motor, 20);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].k_motor, 80);

// Test the Constant determined experiment to determine the torque generated by propellor at different prop angular speeds
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].k_T_p, 0);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].k_T_p, 0);

// Test the Constant to convert prop motor PWM commands to Prop Angular Speed
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].k_Omega, 0);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].k_Omega, 0);

// Test the Constant e
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].e, 0.9);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].e, 0.9);

// Test the Sigmoid Function Transition Rate Coefficient (Positive) of Angle of Attack
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].M, 50);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].M, 50);

// Test the Sigmoid Function Cut-off Angle of Attack Coefficient(Positive)
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].alpha_0, 0.4712);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].alpha_0, 0.4712);

// Test the Constnt epsilon
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].epsilon, 0.1592);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].epsilon, 0.1592);

// Test the Intertial Matrix Constants (Kg m^2)
// xx
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].J_vector.x, 0.1147);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].J_vector.x, 0.8244);
// yy
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].J_vector.y, 0.0576);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].J_vector.y, 1.135);
// zz
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].J_vector.z, 0.1712);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].J_vector.z, 1.759);
// xz
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].J_vector.xz, 0.0015);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].J_vector.xz, 0.1204);

// Test the Aerodynamic constants in C_arr
// L_0 - Zeroth Order Longitudinal Derivative Coefficient of Alpha the Angle of Attack to Calculate Lift Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.L_0, 0.09167);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.L_0, 0.28);
// D_0 - Zeroth Order Longitudinal Derivative Coefficient of Alpha the Angle of Attack to Calculate Drag Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.D_0, 0.01631);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.D_0, 0.03);
// m_0 - Zeroth Order Longitudinal Derivative Coefficient of Alpha the Angle of Attack to Calculate Torque Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.m_0, (-0.02338));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.m_0, (-0.02338));
// L_alpha - First Order Longitudinal Derivative Coefficient of Alpha the Angle of Attack to Calculate Lift Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.L_alpha, 3.5016);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.L_alpha, 3.45);
// D_alpha - First Order Longitudinal Derivative Coefficient of Alpha the Angle of Attack to Calculate Drag Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.D_alpha, 0.2108);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.D_alpha, 0.30);
// m_alpha - First Order Longitudinal Derivative Coefficient of Alpha the Angle of Attack to Calculate Torque Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.m_alpha, (-0.5675));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.m_alpha, (-0.38));
// L_q - First Order Longitudinal Derivative Coefficient of q the Pitch Rate to Calculate Lift Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.L_q, 2.8932);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.L_q, 0);
// D_q - First Order Longitudinal Derivative Coefficient of q the Pitch Rate to Calculate Drag Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.D_q, 0);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.D_q, 0);
// m_q - First Order Longitudinal Derivative Coefficient of q the Pitch Rate to Calculate Torque Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.m_q, (-1.3990));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.m_q, (-3.6));
// L_delta_e - First Order Longitudinal Derivative Coefficient of delta_e the elevator deflection to Calculate Lift Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.L_delta_e, 0.2724);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.L_delta_e, (-0.36));
// D_delta_e - First Order Longitudinal Derivative Coefficient of delta_e the elevator deflection to Calculate Drag Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.D_delta_e, 0.3045);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.D_delta_e, 0);
// m_delta_e - First Order Longitudinal Derivative Coefficient of delta_e the elevator deflection to Calculate Torque Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.m_delta_e, (-0.3254));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.m_delta_e, (-0.5));
// prop - Properller Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.prop, (1.0));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.prop, (1.0));
// D_p - Parasitic Drag Coeeficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.D_p, (0.0254));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.D_p, (0.0437));
// n_delta_r - Coefficient of n moment caused by rudder deflection
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.n_delta_r, (-0.032));
// Y_0 - Zeroth Order Lateral Force Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.Y_0, 0);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.Y_0, (0));
// l_0 - Zeroth Order Roll Moment Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.l_0, 0);
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.l_0, 0);
// n_0 - Zeroth Order Yaw Moment Coefficient
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.n_0, (0));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.n_0, (0));
// Y_beta - First Order Lateral Force Coefficient of Slip Angle Beta
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.Y_beta, (-0.07359));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.Y_beta, (-0.98));
// l_beta - First Order Roll Moment Coefficient of Slip Angle Beta
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.l_beta, (-0.02854));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.l_beta, (-0.12));
// n_beta - First Order Yaw Moment Coefficient of Slip Angle Beta
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.n_beta, (-0.00040));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.n_beta, (0.25));
// Y_p - First Order Lateral Force Coefficient of Roll Rate p
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.Y_p, (0));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.Y_p, (0));
// l_p - First Order Roll Moment Coefficient of Roll Rate p
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.l_p, (-0.3209));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.l_p, (-0.26));
// n_p - First Order Yaw Moment Coefficient of Roll Rate p
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.n_p, (-0.01297));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.n_p, (0.022));
// Y_r - First Order Lateral Force Coefficient of Yaw Rate r
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.Y_r, (0));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.Y_r, (0));
// l_r - First Order Roll Moment Coefficient of Yaw Rate r
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.l_r, (0.03066));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.l_r, (0.14));
// n_r - First Order Yaw Moment Coefficient of Yaw Rate r
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.n_r, (-0.00434));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.n_r, (-0.35));
// Y_delta_a - First Order Lateral Force Coefficient of aeleron defelction delta_a
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.Y_delta_a, (0));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.Y_delta_a, (0));
// l_delta_a - First Order Roll Moment Coefficient of aeleron defelction delta_a
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.l_delta_a, (0.1682));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.l_delta_a, (0.08));
// n_delta_a - First Order Yaw Moment Coefficient of aeleron defelction delta_a
assert.deepStrictEqual(uav_params.uav_param_config.uavs[0].C_arr.n_delta_a, (-0.00328));
assert.deepStrictEqual(uav_params.uav_param_config.uavs[1].C_arr.n_delta_a, (0.06));

console.log('Passed all tests.');